---
description: This is how the project is structured and what the game is about
globs: 
alwaysApply: false
---
# Civilization Grid Prototype - Project Overview

## Project Structure
This is a LÖVE-based grid-based civilization game prototype with the following key components:

1. **Main Game Files**:
   - `main.lua`: Entry point, handles game loop, input, and rendering
   - `game.lua`: Main game state and initialization
   - `player.lua`: Player entity, movement, and UI

2. **Grid System**:
   - `grid.lua`: Grid generation and management
   - `tile.lua`: Tile types, properties, and yields

3. **Game Mechanics**:
   - `buildings.lua`: Building types and effects
   - `resources.lua`: Resource types and bonuses
   - `types.lua`: Enums and type definitions
   - `notification.lua`: Notification system for game events

4. **UI and Rendering**:
   - `renderer.lua`: Handles drawing of game elements
   - `tilemenu.lua`: UI for tile interaction
   - `camera.lua`: Camera movement and viewport calculations
   - `settlement.lua`: Settlement UI and management

## Key Concepts

### Grid System
- The game world is a grid of tiles (300x300)
- Each tile has a type (Plains, Forest, Mountain, Water)
- Tiles can contain resources and buildings
- Tiles provide yields (Food, Production, Gold)

### Buildings and Resources
- Buildings can be placed on tiles with restrictions based on tile type
- Resources spawn on tiles based on rarity and valid tile types
- Both buildings and resources provide yield bonuses

### UI System
- Top bar shows player yields
- Tile menu allows interaction with tiles
- Tooltips show information about tiles
- End Turn button allows manual turn advancement
- Notification system provides feedback for game events

### Notification System
- Modular system for displaying game events to the player
- Different notification types (Turn, Resource, Warning, Achievement) with distinct styling
- Notifications can be positioned at top, middle, or bottom of screen
- Dynamic sizing based on text content with minimum width
- Fade-in and fade-out animations with configurable duration
- Text shadow effect for improved readability
- Notification queue with maximum limit to prevent screen clutter
- Test mode available by pressing 'T' key

## Code Patterns
- Classes use the Lua metatables pattern with `Class.new()` constructors
- Game state is centralized in the `game` global variable
- LÖVE callbacks (`love.load`, `love.update`, `love.draw`, etc.) handle the game loop
- Rendering is done with a camera translation system
- Enums used for type safety (NotificationType, NotificationPosition)

### Turn System
- Game progresses through turns, tracked by a turn counter
- Player movement triggers turn advancement
- End Turn button allows manual turn advancement
- Turn changes trigger notifications
- Player resources and yields update at the end of each turn

### Player System
- Player has a position on the grid
- Player can move between non-water tiles using WASD keys
- Player has yields (Food, Production, Gold) displayed in a UI bar
- Camera centers on player position
- Player has a sight range (4 tiles in each direction)
- Player maintains their own list of discovered tiles
- Each player has their own fog of war
- Undiscovered tiles appear as dark gray (fog of war)
- Player can create settlements on non-water tiles
- Settlements have a 2x2 tile border initially
- Buildings can only be constructed within settlement borders
- Player receives notifications for important events

### Settlements System
- Players can found settlements on non-water tiles
- Settlements have a center position and a border radius
- Initial settlements have a border radius of 1 (covering a 2x2 area)
- Settlements cannot be founded within 4 tiles of an existing settlement
- Each settlement has a unique name (currently randomly generated)
- Settlements provide visual borders around controlled tiles
- Only tiles within settlement borders contribute to player yields
- Buildings can only be constructed on tiles within settlement borders
- Each settlement displays its name, yields, and tile count
- Settlement centers are marked with a gold circle
- Settlement borders are displayed with white semi-transparent lines
- The UI shows the total number of settlements and controlled tiles
- Founding a new settlement triggers an achievement notification

## Development Notes
- The game automatically runs when files are saved
- No need to run from CLI, just save the files to see changes
- Player movement is handled with WASD keys
- Camera movement is handled with arrow keys
- Escape key quits the game or closes menus
- Press 'T' to test the notification system with various message lengths